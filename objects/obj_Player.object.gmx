<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playertest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
func_Ginput(); //get input
hp = 100;
//event_inherited()
spd = 4;
image_speed = 0;
hspd = 0;
vspd = 0;
len = 0;
dir = 0;
state = state_mv; //lets the player move (duh)
canattack = true;
depth = -y; //used for fake z axis i guess
//team = 1; //used to not damage team members or to not get damaged
whereisp = room_get_name(room) //used for saving function
enhitbyatk = ds_list_create();

//set sprites vars

chrName="Kevin";

//standing
playerRight = draw_sprite(chrName, 0, x, y);
playerU_R = draw_sprite(chrName, 1, x, y);
playerUp = draw_sprite(chrName, 2, x, y);
playerU_L = draw_sprite(chrName, 3, x, y);
playerLeft = draw_sprite(chrName, 4, x, y);
playerD_L = draw_sprite(chrName, 5, x, y);
playerDown = draw_sprite(chrName, 6, x, y);
playerD_R = draw_sprite(chrName, 7, x, y);

//attacking
plAtk_Right = draw_sprite(chrName, 8, x, y);
plAtk_Up = draw_sprite(chrName, 9, x, y);
plAtk_Left = draw_sprite(chrName, 10, x, y);
plAtk_Down = draw_sprite(chrName, 11, x, y);

//spin attack
plAtk_Spin = draw_sprite(chrName, 12, x, y);
plAtk_Spin_at = draw_sprite(chrName, 13-15, x, y);

//combo attack end
plAtk_Spin_end = draw_sprite(chrName, 16-19, x, y);

//running pose
plRunP_Right = draw_sprite(chrName, 20, x, y);
plRunP_U_R = draw_sprite(chrName, 21, x, y);
plRunP_Up = draw_sprite(chrName, 22, x, y);
plRunP_U_L = draw_sprite(chrName, 23, x, y);
plRunP_Left = draw_sprite(chrName, 24, x, y);
plRunP_D_L = draw_sprite(chrName, 25, x, y);
plRunP_Down = draw_sprite(chrName, 26, x, y);
plRunP_D_R = draw_sprite(chrName, 27, x, y);

//running
plRun_Right = draw_sprite(chrName, 28-31, x, y);
plRun_U_R = draw_sprite(chrName, 32-35, x, y);
plRun_Up = draw_sprite(chrName, 36-39, x, y);
plRun_U_L = draw_sprite(chrName, 40-43, x, y);
plRun_Left = draw_sprite(chrName, 44-47, x, y);
plRun_D_L = draw_sprite(chrName, 48-51, x, y);
plRun_Down = draw_sprite(chrName, 52-55, x, y);
plRun_D_R = draw_sprite(chrName, 56-59, x, y);

//if hp is less than 1 then trigger death animation and state

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(enhitbyatk)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dodge
state = state_mv

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state machine
//event_inherited()

switch (state) {
    case state_mv:
         state_mv()
         break;
    case state_nrmlAtk: state_nrmlAtk() break;
    case state_dodge:
         state_dodge()
         break;
    case state_run:
         state_run()
         break; 
    case state_atkCombo:
         state_atkCombo()
         break;
    default:
         state_mv();}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_ellipse_colour(x-3, y-3, x+3, y+3, c_gray, c_gray,false)
////Shadow
//draw_sprite(spr_p_test2_sh, image_index, x, y)
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
